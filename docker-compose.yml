version: '3'

# Specify the Airflow build and environment
x-airflow-common:
  &airflow-common
  build:
    context: ./containers/airflow/
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
    AIRFLOW_CONN_POSTGRES_DEFAULT: postgres://airflow:airflow@postgres:5432/airflow
  volumes:
    - ./dags:/opt/airflow/dags
    #- ./data:/opt/airflow/data
    - ./visualization:/opt/airflow/visualization
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./tests:/opt/airflow/tests
    - ./temp:/opt/airflow/temp
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  depends_on:
    postgres:
      condition: service_healthy

services:

  # Postgres database to store (transactional) data and airflow configurations
  postgres:
    container_name: postgres
    image: postgres:16
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5432:5432"
    volumes:
      - ./data/simulation_data:/simulation_data
      - ./containers/upstream/1-upstream-data.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 5s
      retries: 5
    restart: always

  ### Airflow services ###
  airflow-webserver:
    <<: *airflow-common
    container_name: webserver
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--fail",
          "http://localhost:8080/health"
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    container_name: scheduler
    command: scheduler
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"'
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}

  ### Spark master and workers ###
  spark-master:
    image: spark-image 
    container_name: spark-master
    entrypoint: ['./entrypoint.sh', 'master']
    build:
      context: ./containers/spark
      dockerfile: Dockerfile
    ports:
      - "4040:4040"
      - "9090:9090"
      - "7077:7077"
      - "3000:3000"
      - "2222:22"
    volumes:
      - ./spark-job:/opt/spark/work-dir/spark-job
      - ./data:/opt/spark/work-dir/data
      - spark-logs:/opt/spark/spark-events
      - tpch-data:/opt/spark/tpch-dbgen
    environment:
      UPSTREAM_DRIVERNAME: postgresql
      UPSTREAM_HOST: postgres
      UPSTREAM_PORT: '5432'
      UPSTREAM_USERNAME: airflow
      UPSTREAM_PASSWORD: airflow
      UPSTREAM_DATABASE: airflow
    env_file:
      - .env.spark
  
  spark-history-server:
    container_name: spark-history
    image: spark-image
    entrypoint: ['./entrypoint.sh', 'history']
    depends_on:
      - spark-master
    env_file:
      - .env.spark
    volumes:
      - spark-logs:/opt/spark/spark-events
    ports:
      - '18080:18080'

  spark-worker:
    image: spark-image
    entrypoint: ['./entrypoint.sh', 'worker']
    volumes:
      - ./spark-job:/opt/spark/work-dir/spark-job
      - spark-logs:/opt/spark/spark-events
      - tpch-data:/opt/spark/tpch-dbgen
    env_file:
      - .env.spark
    environment:
      UPSTREAM_DRIVERNAME: postgresql
      UPSTREAM_HOST: postgres
      UPSTREAM_PORT: '5432'
      UPSTREAM_USERNAME: airflow
      UPSTREAM_PASSWORD: airflow
      UPSTREAM_DATABASE: airflow
  
  ### Storage ###
  minio:
    image: 'minio/minio:latest'
    hostname: minio
    container_name: minio
    ports:
      - '9000:9000' 
      - '9001:9001'
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    command: server --console-address ":9001" /data
  
  # Create buckets in minIO using mc tool
  minio-create-buckets:
    image: minio/mc:latest
    container_name: create-buckets
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c " /usr/bin/mc config host add myminio http://minio:9000 minio minio123; /usr/bin/mc rm -r --force myminio/tpch; /usr/bin/mc mb myminio/tpch; /usr/bin/mc policy download myminio/tpch; /usr/bin/mc rm -r --force myminio/insta-cart; /usr/bin/mc mb myminio/insta-cart; /usr/bin/mc policy download myminio/insta-cart; exit 0; "

volumes:
  spark-logs:
  tpch-data: